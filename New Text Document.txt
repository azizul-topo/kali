**1**

#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;             // Process ID
    int arrival_time;    // Arrival time
    int burst_time;      // Burst time
    int completion_time; // Completion time
    int turnaround_time; // Turnaround time
    int waiting_time;    // Waiting time
} Process;

// Function to calculate times
void calculateTimes(Process processes[], int n) {
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // CPU idle case
        if (processes[i].arrival_time > current_time) {
            current_time = processes[i].arrival_time;
        }

        processes[i].waiting_time = current_time - processes[i].arrival_time;
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;

        current_time = processes[i].completion_time;
    }
}

// Function to display results
void displayResults(Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    printf("-------\t-------\t-----\t----------\t----------\t-------\n");

    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].completion_time,
               processes[i].turnaround_time,
               processes[i].waiting_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
}

// Gantt Chart display
void displayGanttChart(Process processes[], int n) {
    printf("\nGantt Chart:\n");

    // Print process IDs
    for (int i = 0; i < n; i++) {
        printf(" | P%d", processes[i].pid);
    }
    printf(" |\n");

    // Print timeline
    int time = 0;
    printf("%d", time);
    for (int i = 0; i < n; i++) {
        if (time < processes[i].arrival_time) time = processes[i].arrival_time;
        time += processes[i].burst_time;
        printf("\t%d", time);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Sort by arrival time (then by PID if tie)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time ||
               (processes[j].arrival_time == processes[j+1].arrival_time &&
                processes[j].pid > processes[j+1].pid)) {
                Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
        }
    }

    calculateTimes(processes, n);
    displayResults(processes, n);
    displayGanttChart(processes, n);

    return 0;
}






*****2***********


#include <stdio.h>
#include <stdbool.h>

typedef struct {
    int pid;             // Process ID
    int arrival_time;    // Arrival time
    int burst_time;      // Burst time
    int completion_time; // Completion time
    int waiting_time;    // Waiting time
    int turnaround_time; // Turnaround time
    bool completed;      // Completion flag
} Process;

void calculateTimes(Process p[], int n) {
    int completed_count = 0, current_time = 0;

    while (completed_count < n) {
        int idx = -1;
        int min_burst = 1e9;  // Large number

        // Find the process with the smallest burst time among those that have arrived
        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].arrival_time <= current_time) {
                if (p[i].burst_time < min_burst) {
                    min_burst = p[i].burst_time;
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            // No process has arrived yet â†’ CPU idle
            current_time++;
        } else {
            // Execute the chosen process
            p[idx].waiting_time = current_time - p[idx].arrival_time;
            current_time += p[idx].burst_time;
            p[idx].completion_time = current_time;
            p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
            p[idx].completed = true;
            completed_count++;
        }
    }
}

void displayResults(Process p[], int n) {
    float total_wait = 0, total_turnaround = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    printf("-------\t-------\t-----\t----------\t-------\t----------\n");

    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n",
               p[i].pid, p[i].arrival_time, p[i].burst_time,
               p[i].completion_time, p[i].waiting_time, p[i].turnaround_time);
        total_wait += p[i].waiting_time;
        total_turnaround += p[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround / n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].completed = false;
    }

    calculateTimes(p, n);
    displayResults(p, n);

    return 0;
}





*********3************



