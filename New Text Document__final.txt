**1**

#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;             // Process ID
    int arrival_time;    // Arrival time
    int burst_time;      // Burst time
    int completion_time; // Completion time
    int turnaround_time; // Turnaround time
    int waiting_time;    // Waiting time
} Process;

// Function to calculate times
void calculateTimes(Process processes[], int n) {
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // CPU idle case
        if (processes[i].arrival_time > current_time) {
            current_time = processes[i].arrival_time;
        }

        processes[i].waiting_time = current_time - processes[i].arrival_time;
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;

        current_time = processes[i].completion_time;
    }
}

// Function to display results
void displayResults(Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    printf("-------\t-------\t-----\t----------\t----------\t-------\n");

    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].completion_time,
               processes[i].turnaround_time,
               processes[i].waiting_time);

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
}

// Gantt Chart display
void displayGanttChart(Process processes[], int n) {
    printf("\nGantt Chart:\n");

    // Print process IDs
    for (int i = 0; i < n; i++) {
        printf(" | P%d", processes[i].pid);
    }
    printf(" |\n");

    // Print timeline
    int time = 0;
    printf("%d", time);
    for (int i = 0; i < n; i++) {
        if (time < processes[i].arrival_time) time = processes[i].arrival_time;
        time += processes[i].burst_time;
        printf("\t%d", time);
    }
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Sort by arrival time (then by PID if tie)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time ||
               (processes[j].arrival_time == processes[j+1].arrival_time &&
                processes[j].pid > processes[j+1].pid)) {
                Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
        }
    }

    calculateTimes(processes, n);
    displayResults(processes, n);
    displayGanttChart(processes, n);

    return 0;
}






*****2***********


#include <stdio.h>
#include <stdbool.h>

typedef struct {
    int pid;             // Process ID
    int arrival_time;    // Arrival time
    int burst_time;      // Burst time
    int completion_time; // Completion time
    int waiting_time;    // Waiting time
    int turnaround_time; // Turnaround time
    bool completed;      // Completion flag
} Process;

void calculateTimes(Process p[], int n) {
    int completed_count = 0, current_time = 0;

    while (completed_count < n) {
        int idx = -1;
        int min_burst = 1e9;  // Large number

        // Find the process with the smallest burst time among those that have arrived
        for (int i = 0; i < n; i++) {
            if (!p[i].completed && p[i].arrival_time <= current_time) {
                if (p[i].burst_time < min_burst) {
                    min_burst = p[i].burst_time;
                    idx = i;
                }
            }
        }

        if (idx == -1) {
            // No process has arrived yet â†’ CPU idle
            current_time++;
        } else {
            // Execute the chosen process
            p[idx].waiting_time = current_time - p[idx].arrival_time;
            current_time += p[idx].burst_time;
            p[idx].completion_time = current_time;
            p[idx].turnaround_time = p[idx].completion_time - p[idx].arrival_time;
            p[idx].completed = true;
            completed_count++;
        }
    }
}

void displayResults(Process p[], int n) {
    float total_wait = 0, total_turnaround = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tWaiting\tTurnaround\n");
    printf("-------\t-------\t-----\t----------\t-------\t----------\n");

    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n",
               p[i].pid, p[i].arrival_time, p[i].burst_time,
               p[i].completion_time, p[i].waiting_time, p[i].turnaround_time);
        total_wait += p[i].waiting_time;
        total_turnaround += p[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", total_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround / n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time for P%d: ", i + 1);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for P%d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].completed = false;
    }

    calculateTimes(p, n);
    displayResults(p, n);

    return 0;
}





*********3************



#include <stdio.h>
int main() {
 int n, i, j;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 int pid[n], bt[n], pr[n], wt[n], tat[n], temp;
 for(i = 0; i < n; i++) {
 pid[i] = i + 1;
 printf("Enter burst time and priority for process P%d: ", pid[i]);
 scanf("%d %d", &bt[i], &pr[i]);
 }
 // Sort by priority (lower number = higher priority)
 for(i = 0; i < n - 1; i++) {
 for(j = i + 1; j < n; j++) {
 if(pr[i] > pr[j]) {
 // Swap burst time
 temp = bt[i];
 bt[i] = bt[j];
 bt[j] = temp;
 // Swap priority
 temp = pr[i];
 pr[i] = pr[j];
 pr[j] = temp;
 // Swap process ID
 temp = pid[i];
 pid[i] = pid[j];
 pid[j] = temp;
 }
 }
 }
 wt[0] = 0;
 for(i = 1; i < n; i++) {
 wt[i] = wt[i - 1] + bt[i - 1];
 }
 for(i = 0; i < n; i++) {
 tat[i] = wt[i] + bt[i];
 }
 printf("\nProcess\tBT\tPriority\tWT\tTAT\n");
 for(i = 0; i < n; i++) {
 printf("P%d\t%d\t%d\t\t%d\t%d\n", pid[i], bt[i], pr[i], wt[i], tat[i]);
 }
 return 0;
}



************4*********




#include <stdio.h>

int main() {
    int n, tq;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int bt[n], at[n], rt[n], wt[n], tat[n], completed[n];
    int time = 0, remain = n, i;

    // Input process info
    for (i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for P%d: ", i + 1);
        scanf("%d %d", &at[i], &bt[i]);
        rt[i] = bt[i];   // Remaining time
        completed[i] = 0; // Not finished
        wt[i] = tat[i] = 0;
    }

    printf("Enter time quantum: ");
    scanf("%d", &tq);

    int done = 0;
    while (remain > 0) {
        done = 0;
        for (i = 0; i < n; i++) {
            if (at[i] <= time && rt[i] > 0) {
                done = 1;
                if (rt[i] > tq) {
                    time += tq;
                    rt[i] -= tq;
                } else {
                    time += rt[i];
                    wt[i] = time - at[i] - bt[i];  // WT = finish - arrival - burst
                    tat[i] = wt[i] + bt[i];
                    rt[i] = 0;
                    completed[i] = 1;
                    remain--;
                }
            }
        }
        if (done == 0) time++; // If no process has arrived, advance time
    }

    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    int total_wt = 0, total_tat = 0;
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n", i + 1, at[i], bt[i], wt[i], tat[i]);
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("\nAverage Waiting Time = %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_tat / n);

    return 0;
}


**************5*************



#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define SIZE 5  // Buffer size

int *buffer;
int in = 0, out = 0;
int items_per_thread;

sem_t empty;
sem_t full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int id = *(int*)arg;
    for (int i = 0; i < items_per_thread; i++) {
        int item = rand() % 100;

        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        buffer[in] = item;
        printf("[Producer %d] Produced: %d\n", id, item);
        in = (in + 1) % SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&full);

        sleep(rand() % 2);
    }
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int id = *(int*)arg;
    for (int i = 0; i < items_per_thread; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        int item = buffer[out];
        printf("           [Consumer %d] Consumed: %d\n", id, item);
        out = (out + 1) % SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);

        sleep(rand() % 2);
    }
    pthread_exit(NULL);
}

int main() {
    int num_producers, num_consumers;

    printf("Enter number of producers: ");
    scanf("%d", &num_producers);
    printf("Enter number of consumers: ");
    scanf("%d", &num_consumers);
    printf("Enter number of items per producer/consumer: ");
    scanf("%d", &items_per_thread);

    buffer = (int*)malloc(SIZE * sizeof(int));

    sem_init(&empty, 0, SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_t prod_threads[num_producers], cons_threads[num_consumers];
    int *prod_ids = malloc(num_producers * sizeof(int));
    int *cons_ids = malloc(num_consumers * sizeof(int));

    for (int i = 0; i < num_producers; i++) {
        prod_ids[i] = i + 1;
        pthread_create(&prod_threads[i], NULL, producer, &prod_ids[i]);
    }
    for (int i = 0; i < num_consumers; i++) {
        cons_ids[i] = i + 1;
        pthread_create(&cons_threads[i], NULL, consumer, &cons_ids[i]);
    }

    for (int i = 0; i < num_producers; i++)
        pthread_join(prod_threads[i], NULL);
    for (int i = 0; i < num_consumers; i++)
        pthread_join(cons_threads[i], NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    free(buffer);
    free(prod_ids);
    free(cons_ids);

    return 0;
}


***************6********************





#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX_ITEM 100

int *buffer;
int *input_buffer;
int buffer_size;
int num_producers;
int num_consumers;
int total_items;

int in = 0;
int out = 0;
int produced_count = 0;
int consumed_count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t full = PTHREAD_COND_INITIALIZER;
pthread_cond_t empty = PTHREAD_COND_INITIALIZER;

// Producer function
void* producer(void* arg) {
    int producer_id = (int)(long)arg;

    while (1) {
        pthread_mutex_lock(&mutex);
        if (produced_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        // Wait if buffer is full
        while ((in + 1) % buffer_size == out) {
            pthread_cond_wait(&empty, &mutex);
        }

        if (produced_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        int item = input_buffer[produced_count];
        buffer[in] = item;
        printf("Producer %d produced item: %d\n", producer_id, item);
        in = (in + 1) % buffer_size;
        produced_count++;

        pthread_cond_signal(&full);
        pthread_mutex_unlock(&mutex);

        sleep(rand() % 2);
    }

    pthread_exit(NULL);
}

// Consumer function
void* consumer(void* arg) {
    int consumer_id = (int)(long)arg;

    while (1) {
        pthread_mutex_lock(&mutex);
        if (consumed_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        // Wait if buffer is empty
        while (in == out) {
            pthread_cond_wait(&full, &mutex);
        }

        if (consumed_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        int item = buffer[out];
        printf("Consumer %d consumed item: %d\n", consumer_id, item);
        out = (out + 1) % buffer_size;
        consumed_count++;

        pthread_cond_signal(&empty);
        pthread_mutex_unlock(&mutex);

        sleep(rand() % 2);
    }

    pthread_exit(NULL);
}

int main() {
    printf("Enter buffer size: ");
    scanf("%d", &buffer_size);

    printf("Enter number of producers: ");
    scanf("%d", &num_producers);

    printf("Enter number of consumers: ");
    scanf("%d", &num_consumers);

    printf("Enter total number of items to produce: ");
    scanf("%d", &total_items);

    buffer = (int*)malloc(buffer_size * sizeof(int));
    input_buffer = (int*)malloc(total_items * sizeof(int));

    printf("Enter %d items to produce:\n", total_items);
    for (int i = 0; i < total_items; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d", &input_buffer[i]);
    }

    pthread_t producers[num_producers], consumers[num_consumers];

    for (long i = 0; i < num_producers; i++) {
        pthread_create(&producers[i], NULL, producer, (void*)i);
    }

    for (long i = 0; i < num_consumers; i++) {
        pthread_create(&consumers[i], NULL, consumer, (void*)i);
    }

    for (int i = 0; i < num_producers; i++) {
        pthread_join(producers[i], NULL);
    }

    for (int i = 0; i < num_consumers; i++) {
        pthread_join(consumers[i], NULL);
    }

    free(buffer);
    free(input_buffer);
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);

    return 0;
}



**************7****************




#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX_READERS 100
#define MAX_WRITERS 100

int data = 0;  // Shared resource
int read_count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t read_count_mutex = PTHREAD_MUTEX_INITIALIZER;

int read_loops, write_loops;

void* reader(void* arg) {
    int id = (int)(long)arg;

    for (int i = 0; i < read_loops; i++) {
        pthread_mutex_lock(&read_count_mutex);
        read_count++;
        if (read_count == 1) {
            pthread_mutex_lock(&mutex);
        }
        pthread_mutex_unlock(&read_count_mutex);

        // Reading
        printf("Reader %d: read data = %d\n", id, data);
        sleep(rand() % 2);

        pthread_mutex_lock(&read_count_mutex);
        read_count--;
        if (read_count == 0) {
            pthread_mutex_unlock(&mutex);
        }
        pthread_mutex_unlock(&read_count_mutex);

        sleep(rand() % 2);
    }

    pthread_exit(NULL);
}

void* writer(void* arg) {
    int id = (int)(long)arg;

    for (int i = 0; i < write_loops; i++) {
        pthread_mutex_lock(&mutex);

        data++;
        printf("Writer %d: wrote data = %d\n", id, data);
        sleep(rand() % 2);

        pthread_mutex_unlock(&mutex);
        sleep(rand() % 2);
    }

    pthread_exit(NULL);
}

int main() {
    int num_readers, num_writers;

    printf("Enter number of reader threads: ");
    scanf("%d", &num_readers);
    printf("Enter number of writer threads: ");
    scanf("%d", &num_writers);

    if (num_readers > MAX_READERS || num_writers > MAX_WRITERS) {
        printf("Error: Maximum threads exceeded.\n");
        return -1;
    }

    printf("Enter number of read operations per reader: ");
    scanf("%d", &read_loops);
    printf("Enter number of write operations per writer: ");
    scanf("%d", &write_loops);

    pthread_t readers[num_readers], writers[num_writers];

    for (long i = 0; i < num_readers; i++) {
        pthread_create(&readers[i], NULL, reader, (void*)i);
    }

    for (long i = 0; i < num_writers; i++) {
        pthread_create(&writers[i], NULL, writer, (void*)i);
    }

    for (int i = 0; i < num_readers; i++) {
        pthread_join(readers[i], NULL);
    }

    for (int i = 0; i < num_writers; i++) {
        pthread_join(writers[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&read_count_mutex);

    return 0;
}



*****************8*******************





#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define MAX_PHILOSOPHERS 10  // Maximum number of philosophers

pthread_mutex_t chopsticks[MAX_PHILOSOPHERS];

void* philosopher(void* num) {
    int id = *((int*)num);  // âœ… Correct way to extract philosopher ID

    printf("Philosopher %d is thinking...\n", id);
    sleep(1);

    if (id == MAX_PHILOSOPHERS - 1) {
        // Last philosopher picks right then left (to avoid deadlock)
        pthread_mutex_lock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);
        printf("Philosopher %d picked up right chopstick %d\n", id, (id + 1) % MAX_PHILOSOPHERS);

        pthread_mutex_lock(&chopsticks[id]);
        printf("Philosopher %d picked up left chopstick %d\n", id, id);
    } else {
        // Others pick left then right
        pthread_mutex_lock(&chopsticks[id]);
        printf("Philosopher %d picked up left chopstick %d\n", id, id);

        pthread_mutex_lock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);
        printf("Philosopher %d picked up right chopstick %d\n", id, (id + 1) % MAX_PHILOSOPHERS);
    }

    // Eating
    printf("Philosopher %d is eating...\n", id);
    sleep(2);

    // Put down chopsticks
    pthread_mutex_unlock(&chopsticks[id]);
    pthread_mutex_unlock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);

    printf("Philosopher %d finished eating and put down chopsticks.\n\n", id);

    pthread_exit(NULL);
}

int main() {
    int NUM;

    // Take user input for the number of philosophers
    printf("Enter the number of philosophers (2-%d): ", MAX_PHILOSOPHERS);
    scanf("%d", &NUM);

    // Ensure the number is within a valid range
    if (NUM < 2 || NUM > MAX_PHILOSOPHERS) {
        printf("Invalid number of philosophers. Please enter a number between 2 and %d.\n", MAX_PHILOSOPHERS);
        return -1;
    }

    pthread_t philosophers[NUM];
    int ids[NUM];

    // Initialize chopsticks
    for (int i = 0; i < NUM; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for all philosophers to finish
    for (int i = 0; i < NUM; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy chopsticks
    for (int i = 0; i < NUM; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    return 0;
}



*****************9********************





