fcfs..........


#include <stdio.h>


void calculateWaitingTime(int processes[], int n, int bt[], int wt[]) {
    wt[0] = 0; 


    for (int i = 1; i < n; i++) {
        wt[i] = bt[i - 1] + wt[i - 1];
    }
}


void calculateTurnaroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
    }
}


void calculateAverageTime(int processes[], int n, int bt[]) {
    int wt[n], tat[n];
    int total_wt = 0, total_tat = 0;

    
    calculateWaitingTime(processes, n, bt, wt);
    calculateTurnaroundTime(processes, n, bt, wt, tat);

    
    printf("\nProcess  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("  %d\t    %d\t\t  %d\t\t  %d\n", processes[i], bt[i], wt[i], tat[i]);
    }

    
    printf("\nAverage Waiting Time = %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_tat / n);
}


int main() {
    int n;

    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int processes[n], burst_time[n];

   
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    
    calculateAverageTime(processes, n, burst_time);

    return 0;
}


sjf........

#include <stdio.h>


void sortProcesses(int processes[], int n, int bt[], int at[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (bt[i] > bt[j]) { 
                
                int temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;

                
                temp = at[i];
                at[i] = at[j];
                at[j] = temp;

                
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}


void calculateWaitingTime(int processes[], int n, int bt[], int at[], int wt[]) {
    wt[0] = 0; 

    for (int i = 1; i < n; i++) {
        wt[i] = (bt[i - 1] + wt[i - 1]); 
    }
}


void calculateTurnaroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i]; 
    }
}


void calculateAverageTime(int processes[], int n, int bt[], int at[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    
    sortProcesses(processes, n, bt, at);

    
    calculateWaitingTime(processes, n, bt, at, wt);
    calculateTurnaroundTime(processes, n, bt, wt, tat);

    
    printf("\nProcess  Arrival Time  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("  %d\t    %d\t\t  %d\t\t  %d\t\t  %d\n", processes[i], at[i], bt[i], wt[i], tat[i]);
    }

    
    printf("\nAverage Waiting Time = %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_tat / n);
}


int main() {
    int n;

    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int processes[n], burst_time[n], arrival_time[n];

    
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

   
    calculateAverageTime(processes, n, burst_time, arrival_time);

    return 0;
}

ps.....

#include <stdio.h>


void sortProcesses(int processes[], int n, int bt[], int at[], int priority[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (priority[i] > priority[j]) { 
                
                int temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;

                
                temp = at[i];
                at[i] = at[j];
                at[j] = temp;

               
                temp = priority[i];
                priority[i] = priority[j];
                priority[j] = temp;

                
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}


void calculateWaitingTime(int processes[], int n, int bt[], int at[], int priority[], int wt[]) {
    wt[0] = 0; 

    for (int i = 1; i < n; i++) {
        wt[i] = (bt[i - 1] + wt[i - 1]); 
    }
}


void calculateTurnaroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i]; 
    }
}


void calculateAverageTime(int processes[], int n, int bt[], int at[], int priority[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    
    sortProcesses(processes, n, bt, at, priority);

    
    calculateWaitingTime(processes, n, bt, at, priority, wt);
    calculateTurnaroundTime(processes, n, bt, wt, tat);

   
    printf("\nProcess  Arrival Time  Burst Time  Priority  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("  %d\t    %d\t\t  %d\t\t  %d\t\t  %d\t\t  %d\n", 
               processes[i], at[i], bt[i], priority[i], wt[i], tat[i]);
    }

    
    printf("\nAverage Waiting Time = %.2f", (float)total_wt / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_tat / n);
}


int main() {
    int n;

    
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int processes[n], burst_time[n], arrival_time[n], priority[n];

    
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
        printf("Enter priority for Process %d (lower value = higher priority): ", i + 1);
        scanf("%d", &priority[i]);
    }

   
    calculateAverageTime(processes, n, burst_time, arrival_time, priority);

    return 0;
}


rr........

#include <stdio.h>


void calculateWaitingTime(int processes[], int n, int bt[], int wt[], int quantum, int at[]) {
    int rem_bt[n]; 
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];

    int t = 0; 

    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0; 

                if (rem_bt[i] > quantum && at[i] <= t) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else if (at[i] <= t) {
                    t += rem_bt[i];
                    wt[i] = t - bt[i] - at[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done) break; 
    }
}


void calculateTurnaroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}


void calculateAverageTime(int processes[], int n, int bt[], int at[], int quantum) {
    int wt[n], tat[n];

    calculateWaitingTime(processes, n, bt, wt, quantum, at);
    calculateTurnaroundTime(processes, n, bt, wt, tat);

    printf("\nProcess\tAT\tBT\tWT\tTAT\n");
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("%d\t%d\t%d\t%d\t%d\n", i + 1, at[i], bt[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f", total_wt / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    int processes[n], bt[n], at[n];

    for (int i = 0; i < n; i++) processes[i] = i + 1;

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++)
        scanf("%d %d", &at[i], &bt[i]);

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    calculateAverageTime(processes, n, bt, at, quantum);
    return 0;
}

sample input:
Enter number of processes: 3
Enter arrival time and burst time for each process:
0 5
1 4
2 2
Enter time quantum: 2



pp/cp...


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

int *buffer;
int in = 0, out = 0;
int SIZE;       // Buffer size
int total_items;

sem_t empty;
sem_t full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int id = *(int*)arg;
    for (int i = 0; i < total_items; i++) {
        int item = id * 10 + i + 1; // deterministic item

        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        buffer[in] = item;
        printf("[Producer %d] Produced: %d\n", id, item);
        in = (in + 1) % SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
    free(arg);  // Free allocated memory for thread id
    return NULL;
}

void* consumer(void* arg) {
    int id = *(int*)arg;
    for (int i = 0; i < total_items; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        int item = buffer[out];
        printf("           [Consumer %d] Consumed: %d\n", id, item);
        out = (out + 1) % SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
    free(arg);  // Free allocated memory for thread id
    return NULL;
}

int main() {
    int num_producers, num_consumers;

    // User inputs
    printf("Enter buffer size: ");
    scanf("%d", &SIZE);
    if(SIZE <= 0){
        printf("Buffer size must be positive!\n");
        return 1;
    }

    printf("Enter number of producers: ");
    scanf("%d", &num_producers);
    printf("Enter number of consumers: ");
    scanf("%d", &num_consumers);
    printf("Enter number of items per producer/consumer: ");
    scanf("%d", &total_items);

    if(num_producers <= 0 || num_consumers <= 0 || total_items <= 0){
        printf("Producers, consumers and items must be positive!\n");
        return 1;
    }

    buffer = (int*)malloc(SIZE * sizeof(int));

    sem_init(&empty, 0, SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_t prod_threads[num_producers], cons_threads[num_consumers];

    // Create producer threads
    for (int i = 0; i < num_producers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&prod_threads[i], NULL, producer, id);
    }

    // Create consumer threads
    for (int i = 0; i < num_consumers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&cons_threads[i], NULL, consumer, id);
    }

    // Join producer threads
    for (int i = 0; i < num_producers; i++)
        pthread_join(prod_threads[i], NULL);

    // Join consumer threads
    for (int i = 0; i < num_consumers; i++)
        pthread_join(cons_threads[i], NULL);

    // Final message
    printf("\nAll items have been consumed. Buffer is now empty.\n");

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    free(buffer);

    return 0;
}

bbp......

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

int *buffer;
int *input_buffer;
int buffer_size;
int num_producers;
int num_consumers;
int total_items;

int in = 0;
int out = 0;
int produced_count = 0;
int consumed_count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t full = PTHREAD_COND_INITIALIZER;
pthread_cond_t empty = PTHREAD_COND_INITIALIZER;

// Producer function
void* producer(void* arg) {
    int producer_id = *(int*)arg;

    while (1) {
        pthread_mutex_lock(&mutex);

        if (produced_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        // Wait if buffer is full
        while ((in + 1) % buffer_size == out) {
            pthread_cond_wait(&empty, &mutex);
        }

        if (produced_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        int item = input_buffer[produced_count];
        buffer[in] = item;
        printf("Producer %d produced item: %d\n", producer_id, item);
        in = (in + 1) % buffer_size;
        produced_count++;

        pthread_cond_signal(&full);
        pthread_mutex_unlock(&mutex);
    }

    free(arg);
    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    int consumer_id = *(int*)arg;

    while (1) {
        pthread_mutex_lock(&mutex);

        if (consumed_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        // Wait if buffer is empty
        while (in == out) {
            pthread_cond_wait(&full, &mutex);
        }

        if (consumed_count >= total_items) {
            pthread_mutex_unlock(&mutex);
            break;
        }

        int item = buffer[out];
        printf("Consumer %d consumed item: %d\n", consumer_id, item);
        out = (out + 1) % buffer_size;
        consumed_count++;

        pthread_cond_signal(&empty);
        pthread_mutex_unlock(&mutex);
    }

    free(arg);
    return NULL;
}

int main() {
    printf("Enter buffer size: ");
    scanf("%d", &buffer_size);
    printf("Enter number of producers: ");
    scanf("%d", &num_producers);
    printf("Enter number of consumers: ");
    scanf("%d", &num_consumers);
    printf("Enter total number of items to produce: ");
    scanf("%d", &total_items);

    if(buffer_size <= 0 || num_producers <= 0 || num_consumers <= 0 || total_items <= 0) {
        printf("All inputs must be positive numbers.\n");
        return 1;
    }

    buffer = (int*)malloc(buffer_size * sizeof(int));
    input_buffer = (int*)malloc(total_items * sizeof(int));

    printf("Enter %d items to produce:\n", total_items);
    for (int i = 0; i < total_items; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d", &input_buffer[i]);
    }

    pthread_t producers[num_producers], consumers[num_consumers];

    // Create producer threads
    for (int i = 0; i < num_producers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&producers[i], NULL, producer, id);
    }

    // Create consumer threads
    for (int i = 0; i < num_consumers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&consumers[i], NULL, consumer, id);
    }

    // Join threads
    for (int i = 0; i < num_producers; i++)
        pthread_join(producers[i], NULL);

    for (int i = 0; i < num_consumers; i++)
        pthread_join(consumers[i], NULL);

    printf("\nAll items consumed. Buffer is now empty.\n");

    free(buffer);
    free(input_buffer);
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);

    return 0;
}


rwp...

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

int data = 0; // Shared resource
int read_count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;          // For writers & first reader
pthread_mutex_t read_count_mutex = PTHREAD_MUTEX_INITIALIZER; // Protect read_count

int read_loops, write_loops;

void* reader(void* arg) {
    int id = *(int*)arg;
    free(arg); // free memory for thread ID

    for (int i = 0; i < read_loops; i++) {
        pthread_mutex_lock(&read_count_mutex);
        read_count++;
        if (read_count == 1) {
            pthread_mutex_lock(&mutex); // first reader locks writers
        }
        pthread_mutex_unlock(&read_count_mutex);

        // Reading
        printf("Reader %d: read data = %d\n", id, data);
        // sleep(1); // optional for lab demo

        pthread_mutex_lock(&read_count_mutex);
        read_count--;
        if (read_count == 0) {
            pthread_mutex_unlock(&mutex); // last reader unlocks writers
        }
        pthread_mutex_unlock(&read_count_mutex);
    }

    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;
    free(arg); // free memory for thread ID

    for (int i = 0; i < write_loops; i++) {
        pthread_mutex_lock(&mutex);

        data++;
        printf("Writer %d: wrote data = %d\n", id, data);
        // sleep(1); // optional for lab demo

        pthread_mutex_unlock(&mutex);
    }

    return NULL;
}

int main() {
    int num_readers, num_writers;

    printf("Enter number of reader threads: ");
    scanf("%d", &num_readers);
    printf("Enter number of writer threads: ");
    scanf("%d", &num_writers);

    printf("Enter number of read operations per reader: ");
    scanf("%d", &read_loops);
    printf("Enter number of write operations per writer: ");
    scanf("%d", &write_loops);

    pthread_t readers[num_readers], writers[num_writers];

    // Create reader threads
    for (int i = 0; i < num_readers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&readers[i], NULL, reader, id);
    }

    // Create writer threads
    for (int i = 0; i < num_writers; i++) {
        int *id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&writers[i], NULL, writer, id);
    }

    // Join all threads
    for (int i = 0; i < num_readers; i++)
        pthread_join(readers[i], NULL);

    for (int i = 0; i < num_writers; i++)
        pthread_join(writers[i], NULL);

    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&read_count_mutex);

    printf("\nAll reading and writing operations are done. Final data = %d\n", data);

    return 0;
}


dpp....

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX_PHILOSOPHERS 10

pthread_mutex_t chopsticks[MAX_PHILOSOPHERS];

void* philosopher(void* arg) {
    int id = *(int*)arg;
    free(arg); // free allocated memory

    printf("Philosopher %d is thinking...\n", id);
    sleep(1); // thinking

    // Deadlock-free chopstick picking
    if (id == MAX_PHILOSOPHERS - 1) {
        // Last philosopher picks right then left
        pthread_mutex_lock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);
        printf("Philosopher %d picked up right chopstick %d\n", id, (id + 1) % MAX_PHILOSOPHERS);

        pthread_mutex_lock(&chopsticks[id]);
        printf("Philosopher %d picked up left chopstick %d\n", id, id);
    } else {
        // Others pick left then right
        pthread_mutex_lock(&chopsticks[id]);
        printf("Philosopher %d picked up left chopstick %d\n", id, id);

        pthread_mutex_lock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);
        printf("Philosopher %d picked up right chopstick %d\n", id, (id + 1) % MAX_PHILOSOPHERS);
    }

    // Eating
    printf("Philosopher %d is eating...\n", id);
    sleep(2);

    // Put down chopsticks
    pthread_mutex_unlock(&chopsticks[id]);
    pthread_mutex_unlock(&chopsticks[(id + 1) % MAX_PHILOSOPHERS]);

    printf("Philosopher %d finished eating and put down chopsticks.\n\n", id);

    pthread_exit(NULL);
}

int main() {
    int NUM;

    printf("Enter the number of philosophers (2-10): ");
    scanf("%d", &NUM);

    if (NUM < 2 || NUM > MAX_PHILOSOPHERS) {
        printf("Invalid number of philosophers. Enter 2-%d\n", MAX_PHILOSOPHERS);
        return -1;
    }

    pthread_t philosophers[NUM];

    // Initialize chopsticks
    for (int i = 0; i < NUM; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM; i++) {
        int *id = malloc(sizeof(int));
        *id = i;
        pthread_create(&philosophers[i], NULL, philosopher, id);
    }

    // Join all threads
    for (int i = 0; i < NUM; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy chopsticks
    for (int i = 0; i < NUM; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }

    printf("All philosophers have finished eating.\n");

    return 0;
}

